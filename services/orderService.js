import AsyncStorage from "@react-native-async-storage/async-storage";

const API_BASE_URL = "http://192.168.1.32:8080/api/orders";

// ‚úÖ Fonction pour r√©cup√©rer les en-t√™tes d'authentification
const getAuthHeaders = async () => {
  const token = await AsyncStorage.getItem("token");
  if (!token) {
    console.error("‚ùå Aucun token trouv√© !");
    throw new Error("Non Authentifi√©");
  }
  return {
    Authorization: `Bearer ${token}`,
    "Content-Type": "application/json",
  };
};

const orderService = {
  // ‚úÖ R√©cup√©rer les commandes d'un magasin
  getOrdersForStore: async (storeId, hours = null) => {
    try {
      if (!storeId) throw new Error("‚ùå Aucun `storeId` fourni !");

      const headers = await getAuthHeaders();
      let url = `${API_BASE_URL}/store/${storeId}`;

      // üî• Ajouter `hours` uniquement si une valeur est fournie
      if (hours !== null) {
        url += `?hours=${hours}`;
      }

      console.log(`üì° Envoi requ√™te API : ${url}`);

      const response = await fetch(url, { method: "GET", headers });

      if (!response.ok) throw new Error(`Erreur API : ${response.status}`);
      const data = await response.json();
      console.log("üì¶ R√©ponse API commandes STORE :", data);
      return data;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration commandes STORE :", error);
      return [];
    }
  },

  // ‚úÖ R√©cup√©rer les commandes par statut et p√©riode (ex: "CREATED" des 6 derni√®res heures)
  getOrdersByStatus: async (status, hours = 6) => {
    try {
      const headers = await getAuthHeaders();
      const response = await fetch(
        `${API_BASE_URL}/status/${status}?hours=${hours}`,
        {
          method: "GET",
          headers,
        }
      );

      if (!response.ok) throw new Error(`Erreur API : ${response.status}`);
      return await response.json();
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration commandes (${status}):`, error);
      return [];
    }
  },

  // ‚úÖ R√©cup√©rer uniquement les commandes "CREATED" des derni√®res X heures
  getCreatedOrders: async (hours = 5) => {
    try {
      const headers = await getAuthHeaders();
      console.log(
        `üì° Envoi requ√™te API (CREATED) : ${API_BASE_URL}/status/CREATED?hours=${hours}`
      );

      const response = await fetch(
        `${API_BASE_URL}/status/CREATED?hours=${hours}`,
        {
          method: "GET",
          headers,
        }
      );

      if (!response.ok) throw new Error(`Erreur API : ${response.status}`);
      const data = await response.json();
      console.log("üì¶ R√©ponse API commandes CREATED :", data);
      return data;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration commandes CREATED :", error);
      return [];
    }
  },

  // ‚úÖ Cr√©er une nouvelle commande (uniquement pour les magasins)
  createOrder: async (orderData) => {
    try {
      const headers = await getAuthHeaders();
      const response = await fetch(`${API_BASE_URL}`, {
        method: "POST",
        headers,
        body: JSON.stringify(orderData),
      });

      if (!response.ok)
        throw new Error("Erreur lors de la cr√©ation de la commande");
      return await response.json();
    } catch (error) {
      console.error("‚ùå Erreur cr√©ation commande :", error);
      throw error;
    }
  },

  // ‚úÖ Modifier une commande existante
  updateOrder: async (orderId, orderData) => {
    try {
      const headers = await getAuthHeaders();
      const response = await fetch(`${API_BASE_URL}/${orderId}`, {
        method: "PUT",
        headers,
        body: JSON.stringify(orderData),
      });

      if (!response.ok)
        throw new Error("Erreur lors de la modification de la commande");
      return await response.json();
    } catch (error) {
      console.error("‚ùå Erreur modification commande :", error);
      throw error;
    }
  },

  // ‚úÖ Prendre une commande (le livreur assigne une commande √† lui-m√™me)
  assignOrderToCourier: async (orderId, courierId) => {
    try {
      const headers = await getAuthHeaders();
      const response = await fetch(`${API_BASE_URL}/${orderId}/assign`, {
        method: "PATCH",
        headers,
        body: JSON.stringify({ courierId, status: "ASSIGNED" }),
      });

      const responseData = await response.json();
      if (!response.ok)
        throw new Error(
          responseData.message || "Impossible de prendre la commande"
        );

      return responseData;
    } catch (error) {
      console.error("‚ùå Erreur assignation commande :", error);
      throw error;
    }
  },

  // ‚úÖ R√©cup√©rer les commandes assign√©es √† un livreur
  getAssignedOrders: async (courierId) => {
    try {
      if (!courierId) throw new Error("‚ùå Aucun `courierId` fourni !");

      const headers = await getAuthHeaders();
      const url = `${API_BASE_URL}/courier/${courierId}?status=ASSIGNED`;
      console.log(`üì° Envoi requ√™te API (ASSIGNED) : ${url}`);

      const response = await fetch(url, { method: "GET", headers });

      if (!response.ok) throw new Error(`Erreur API : ${response.status}`);
      const data = await response.json();
      console.log("üì¶ R√©ponse API commandes ASSIGNED :", data);
      return data;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration commandes ASSIGNED :", error);
      return [];
    }
  },

  // ‚úÖ Mettre √† jour uniquement le statut d'une commande (DELIVERED ou RETURNED)
  updateOrderStatus: async (orderId, status) => {
    try {
      const headers = await getAuthHeaders();
      console.log(
        `üì° Envoi requ√™te API (UPDATE STATUS) : ${API_BASE_URL}/${orderId}/status`
      );

      const response = await fetch(`${API_BASE_URL}/${orderId}/status`, {
        method: "PATCH",
        headers,
        body: JSON.stringify({ status }),
      });

      if (!response.ok) throw new Error(`Erreur API : ${response.status}`);
      const data = await response.json();
      console.log("üì¶ R√©ponse API mise √† jour statut :", data);
      return data;
    } catch (error) {
      console.error("‚ùå Erreur mise √† jour statut commande :", error);
      throw error;
    }
  },
  getArchivedOrders: async (userRole, userId) => {
    try {
      const headers = await getAuthHeaders();
      const endpoint =
        userRole === "STORE"
          ? `${API_BASE_URL}/store/${userId}`
          : `${API_BASE_URL}/courier/${userId}`;

      console.log(`üì° R√©cup√©ration des commandes archiv√©es : ${endpoint}`);

      const response = await fetch(endpoint, { method: "GET", headers });

      if (!response.ok) throw new Error(`Erreur API : ${response.status}`);
      const data = await response.json();

      // üî• Filtrer uniquement les commandes "DELIVERED" et "RETURNED"
      return data.filter(
        (order) => order.status === "DELIVERED" || order.status === "RETURNED"
      );
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration commandes archiv√©es :", error);
      return [];
    }
  },
  // ‚úÖ Supprimer une commande
  deleteOrder: async (orderId) => {
    try {
      const headers = await getAuthHeaders();
      const response = await fetch(`${API_BASE_URL}/${orderId}`, {
        method: "DELETE",
        headers,
      });
      if (!response.ok) {
        throw new Error(`Erreur API : ${response.status}`);
      }
      // Comme le backend retourne Mono<Void>, il n'y a pas de corps de r√©ponse.
      return;
    } catch (error) {
      console.error("‚ùå Erreur lors de la suppression de la commande :", error);
      throw error;
    }
  },
};

export default orderService;
